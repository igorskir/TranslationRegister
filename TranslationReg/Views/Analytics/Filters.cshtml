@model TranslationReg.Models.ReportModel
@{ViewBag.Title = "Отчеты";}
<div class="dynamic-block-create blure">
    @using (Html.BeginForm("Report", "Analytics", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        
        <div class="btn-group">
            <button type="button" class="btn btn-default" onclick="MonthBTN()">Текущий месяц</button>
            <button type="button" class="btn btn-default" onclick="BefMonthBTN()">Прошлый месяц</button>
            <button type="button" class="btn btn-default" onclick="HalfYearBTN()">Полугодовой</button>
            <button type="button" class="btn btn-default" onclick="YearBTN()">Годовой</button>
        </div>


        <div class="form-group">
            @Html.Label("Дата от")
            <input type="date" name="filters.PeriodFrom" value="@Model.DateFrom.ToString("yyyy-MM-dd")" id="dateFrom" onchange="DateChanged()" class="form-control" required>
        </div>

        <div class="form-group">
            @Html.Label("Дата до")
            <input type="date" name="filters.PeriodTo" value="@Model.DateTo.ToString("yyyy-MM-dd")" id="dateTo" class="form-control" required>
        </div>

        <div class="form-group">
            @Html.Label("Проект", new {id="ProjectCount" })
            @Html.DropDownList("filters.projectId", Model.ProjectList, new { id = "ProjectList",  htmlAttributes = new { @class = "form-control", required = "required" } })
        </div>

        <div class="form-group">
            @Html.Label("Работник")
            @Html.DropDownList("filters.userId", Model.UserList, new { htmlAttributes = new { @class = "form-control", required = "required" } })
        </div>

        <div class="form-group">
            @Html.Label("Тип работ")
            @Html.DropDownList("filters.workTypeId", Model.WorkTypeList, new { htmlAttributes = new { @class = "form-control", required = "required" } })
        </div>

        <input type="submit" value="Сформировать отчет" class="btn btn-default btn-form" style="margin-top:10px; margin-bottom:-13px" />
        
    }
</div>
<script>
    @functions {
        public DateTime[] YearPeriod()
        {
            DateTime[] period = new DateTime[2];
            int year = DateTime.Now.Year;
            period[0] = new DateTime(year, 1, 1);
            period[1] = new DateTime(year, 12, 31);
            return period;
        }
        public DateTime[] HalfYearPeriod()
        {
            DateTime[] period = new DateTime[2];
            int year = DateTime.Now.Year;
            if(DateTime.Now.Month <= 6)
            {
                period[0] = new DateTime(year, 1, 1);
                period[1] = new DateTime(year, 6, 30);
            }
            else
            {
                period[0] = new DateTime(year, 7, 1);
                period[1] = new DateTime(year, 12, 31);
            }

            return period;
        }
        public DateTime[] MonthPeriod()
        {
            DateTime[] period = new DateTime[2];
            int year = DateTime.Now.Year;
            int month = DateTime.Now.Month;
            int lastDay = DateTime.DaysInMonth(year, month);
            period[0] = new DateTime(year, month, 1);
            period[1] = new DateTime(year, month, lastDay);
            return period;
        }
        public DateTime[] BefMonthPeriod()
        {
            DateTime[] period = new DateTime[2];
            int year = DateTime.Now.Year;
            int month = DateTime.Now.Month - 1;
            int lastDay = DateTime.DaysInMonth(year, month);
            period[0] = new DateTime(year, month, 1);
            period[1] = new DateTime(year, month, lastDay);
            return period;
        }
        }

    window.onload = function () {
        DateChanged();
    };
    function DateChanged()
    {
        var projects = $('#ProjectList');
        $.ajax({
            url: '@Url.Action("UpdateProj", "Analytics")',
            type: "get",
            data: { dateFrom: document.getElementById("dateFrom").value },
            dataType: 'json',
            success: function (data) {
                projects.empty();
                $.each(data, function (index, value) {
                    $('#ProjectCount').html("Проект (" + data.length + ")");
                    console.log(@Model.ProjectList.SelectedValue);
                    projects.append($("<option/>", {
                         
                        value: value.Value,
                        text: value.Text,
                         
                        
                        
                    }));
                });
             }

        });
    }

        function YearBTN()
        {
            document.getElementById("dateFrom").value = "@(YearPeriod()[0].ToString("yyyy-MM-dd"))";
            document.getElementById("dateTo").value = "@(YearPeriod()[1].ToString("yyyy-MM-dd"))";
            DateChanged()
        }

        function HalfYearBTN()
        {
            document.getElementById("dateFrom").value = "@(HalfYearPeriod()[0].ToString("yyyy-MM-dd"))";
            document.getElementById("dateTo").value = "@(HalfYearPeriod()[1].ToString("yyyy-MM-dd"))";
            DateChanged()
        }
        function MonthBTN()
        {
            document.getElementById("dateFrom").value = "@(MonthPeriod()[0].ToString("yyyy-MM-dd"))";
            document.getElementById("dateTo").value  =  "@(MonthPeriod()[1].ToString("yyyy-MM-dd"))";
            DateChanged()
        }
     function BefMonthBTN()
        {
            document.getElementById("dateFrom").value = "@(BefMonthPeriod()[0].ToString("yyyy-MM-dd"))";
            document.getElementById("dateTo").value = "@(BefMonthPeriod()[1].ToString("yyyy-MM-dd"))";
            DateChanged()
        }

    // Название вкладки
    document.title = '@ViewBag.Title';
</script>
<style>
    .form-control {
        border: none;
    }
    .blure {
        margin-bottom:20px;
        padding-top: 17px;
        background-image: url(../style/images/whitebg.png);
          
    }
      
</style>