@model TranslationReg.Models.DocumentModel

@using (Html.BeginForm("Create", "Documents", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Document.Name, "Название")
        @Html.EditorFor(model => model.Document.Name, new { htmlAttributes = new { @class = "form-control", required = "required ", id = "fileName" } })
        @Html.ValidationMessageFor(model => model.Document.Name, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Document.ProjectId, "Проект")
        @Html.DropDownListFor(model => Model.Document.ProjectId, Model.Projects, new { @class = "form-control", required = "required" })
        @Html.ValidationMessageFor(model => model.Document.ProjectId, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Файл оригинала")
        <input type="file" name="original" required="required"  class="fileNamePicker" />
    </div>

    <div class="form-group">
        @Html.Label("Конечный файл (*если готов)")
        <input type="file" name="final" />
    </div>

    <input type="submit" value="Сохранить" class="btn btn-default btn-form" />
}

<script type="text/javascript">
    $(".fileNamePicker[type=file]").change(function () {
        if (!$("#fileName").val())
        {
            var fullPath = $(this).val();
            var name = fullPath.replace(/^.*[\\\/]/, '');
            var withoutExtensionName = name.substr(0, name.indexOf('.'));
            $("#fileName").val(withoutExtensionName);
        }
    });
</script>

<style>
    .addFormContainer {
        margin: 18px;
    }
</style>